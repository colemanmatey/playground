// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizApp.Infrastructure.Data;

#nullable disable

namespace QuizApp.Infrastructure.Migrations
{
    [DbContext(typeof(QuizDbContext))]
    [Migration("20250513174156_Initial_Migration")]
    partial class Initial_Migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizApp.Domain.Entities.Choice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChoiceText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Choices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChoiceText = "Paris",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 2,
                            ChoiceText = "London",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 3,
                            ChoiceText = "Berlin",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 4,
                            ChoiceText = "Madrid",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 5,
                            ChoiceText = "Mars",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 6,
                            ChoiceText = "Jupiter",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 7,
                            ChoiceText = "Saturn",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 8,
                            ChoiceText = "Venus",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 9,
                            ChoiceText = "Shakespeare",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 10,
                            ChoiceText = "Dickens",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 11,
                            ChoiceText = "Hemingway",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 12,
                            ChoiceText = "Austen",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 13,
                            ChoiceText = "H2O",
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 14,
                            ChoiceText = "CO2",
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 15,
                            ChoiceText = "O2",
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 16,
                            ChoiceText = "NaCl",
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 17,
                            ChoiceText = "Japan",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 18,
                            ChoiceText = "China",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 19,
                            ChoiceText = "South Korea",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 20,
                            ChoiceText = "Thailand",
                            QuestionId = 5
                        });
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("Question", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 13, 17, 41, 55, 523, DateTimeKind.Utc).AddTicks(7200),
                            QuestionText = "What is the capital of France?",
                            QuestionType = 0,
                            QuizId = 1,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 13, 17, 41, 55, 523, DateTimeKind.Utc).AddTicks(7204),
                            QuestionText = "Which planet is known as the Red Planet?",
                            QuestionType = 0,
                            QuizId = 1,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 5, 13, 17, 41, 55, 523, DateTimeKind.Utc).AddTicks(7206),
                            QuestionText = "Who wrote 'Romeo and Juliet'?",
                            QuestionType = 0,
                            QuizId = 1,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 5, 13, 17, 41, 55, 523, DateTimeKind.Utc).AddTicks(7208),
                            QuestionText = "What is the chemical symbol for water?",
                            QuestionType = 0,
                            QuizId = 2,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 5, 13, 17, 41, 55, 523, DateTimeKind.Utc).AddTicks(7210),
                            QuestionText = "Which country is known as the Land of the Rising Sun?",
                            QuestionType = 0,
                            QuizId = 2,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Quiz", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 13, 13, 41, 55, 523, DateTimeKind.Local).AddTicks(6899),
                            CreatedBy = "Admin",
                            Description = "Test your general knowledge with these questions!",
                            Title = "General Knowledge Quiz",
                            UpdatedAt = new DateTime(2025, 5, 13, 13, 41, 55, 523, DateTimeKind.Local).AddTicks(6903)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 13, 13, 41, 55, 523, DateTimeKind.Local).AddTicks(6910),
                            CreatedBy = "Admin",
                            Description = "A set of questions covering basic scientific concepts.",
                            Title = "Science Quiz",
                            UpdatedAt = new DateTime(2025, 5, 13, 13, 41, 55, 523, DateTimeKind.Local).AddTicks(6913)
                        });
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.Choice", b =>
                {
                    b.HasOne("QuizApp.Domain.Entities.Question", "Question")
                        .WithMany("Choices")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.Question", b =>
                {
                    b.HasOne("QuizApp.Domain.Entities.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.Question", b =>
                {
                    b.Navigation("Choices");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.Quiz", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
